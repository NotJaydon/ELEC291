                  2   $LIST
0000              4   
0000              5   CLK                   EQU 22118400                                       
0000              6   TIMER0_RATE_LOW       EQU 3900  
0000              7   TIMER0_RELOAD_LOW     EQU ((65536-(CLK/TIMER0_RATE_LOW)))                                        
0000              8   TIMER0_RATE_HIGH      EQU 4100
0000              9   TIMER0_RELOAD_HIGH    EQU ((65536-(CLK/TIMER0_RATE_HIGH)))
0000             10   TIMER0_RATE_WAIT      EQU 1000
0000             11   TIMER0_RELOAD_WAIT    EQU ((65536-(CLK/TIMER0_RATE_WAIT)))
0000             12   TIMER1_RATE           EQU 1000
0000             13   TIMER1_RELOAD         EQU ((65536-(CLK/TIMER1_RATE)))
0000             14   TIMER2_SERVO_RIGHT    EQU 500
0000             15   TIMER2_SERVO_LEFT     EQU 1000
0000             16   TIMER2_RELOAD_RIGHT   EQU ((65536-(CLK/TIMER2_SERVO_RIGHT)))
0000             17   TIMER2_RELOAD_LEFT    EQU ((65536-(CLK/TIMER2_RELOAD_LEFT)))
0000             18   STEADY_STATE          EQU 73000000
0000             19   WINNING_SCORE         EQU 0x65
0000             20   SOUND_OUT             EQU P1.1
0000             21   SEED_GENERATOR        EQU P4.5
0000             22   SERVO                 EQU P0.3
0000             23   US_SENSOR             EQU P0.4
0000             24   
0000             25   ; Reset vector
0000             26   org 0000H
0000 0205BB      27      ljmp Start
0003             28      
0003             29   ; Timer/Counter 0 overflow interrupt vector
000B             30   org 0x000B
000B 02042D      31            ljmp Timer0_ISR
000E             32   
001B             33   org 0x001B
001B 020457      34       ljmp Timer1_ISR
001E             35   
002B             36   org 0x002B
002B 020478      37       ljmp Timer2_ISR
002E             38   
002E             39   ; These register definitions needed by 'math32.inc'
0030             40   DSEG at 30H
0030             41   x:   ds 4
0034             42   y:   ds 4
0038             43   Seed: ds 4
003C             44   bcd: ds 5
0041             45   T2ov: ds 2
0043             46   T1ov: ds 2
0045             47   T0ov: ds 2
0047             48   player1: ds 1
0048             49   player2: ds 1
0049             50   lives_left: ds 1
004A             51   guess_score: ds 1
004B             52   hold_bcd: ds 1
004C             53   
0000             54   BSEG
0000             55   tone: dbit 1
0001             56   inc_or_dec: dbit 1
0002             57   mf: dbit 1
0003             58   game_or_guess: dbit 1
0004             59   Go_To_Wait: dbit 1
0005             60   score_to_update: dbit 1
0006             61   direction: dbit 1
0007             62   tone_select: dbit 1
0008             63   lockout: dbit 1
0009             64   
                570   $LIST
                 67   	$LIST
0370             69   
0370             70   CSEG
0370             71   ; These 'equ' must match the hardware wiring
0370             72   LCD_RS equ P3.2
0370             73   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
0370             74   LCD_E  equ P3.3
0370             75   LCD_D4 equ P3.4
0370             76   LCD_D5 equ P3.5
0370             77   LCD_D6 equ P3.6
0370             78   LCD_D7 equ P3.7
0370             79   
0370             80   
0370 506C6179    81   Initial_Message_Top:    db 'Player 1:', 0
     65722031
     3A00
037A 506C6179    82   Initial_Message_Bottom: db 'Player 2:', 0
     65722032
     3A00
0384 20202020    83   Clear:                  db '                ', 0
     20202020
     20202020
     20202020
     00
0395 506C6179    84   Player1_Message:        db 'Player One Won!', 0
     6572204F
     6E652057
     6F6E2100
03A5 506C6179    85   Player2_Message:        db 'Player Two Won!', 0
     65722054
     776F2057
     6F6E2100
03B5 506C6179    86   Guess_Player_Message:   db 'Player Score: 0', 0
     65722053
     636F7265
     3A203000
03C5 4C697665    87   Lives_Message:          db 'Lives Left: 3', 0
     73204C65
     66743A20
     3300
03D3 47616D65    88   Lost:                   db 'Game Lost!', 0
     204C6F73
     742100
03DE             89   
03DE             90   Display_10_digit_BCD:
03DE C000        91            push ar0
03E0 A840        91            mov r0, bcd+4
03E2 12035A      91            lcall ?Display_BCD
03E5 D000        91            pop ar0
03E7 C000        92            push ar0
03E9 A83F        92            mov r0, bcd+3
03EB 12035A      92            lcall ?Display_BCD
03EE D000        92            pop ar0
03F0 C000        93            push ar0
03F2 A83E        93            mov r0, bcd+2
03F4 12035A      93            lcall ?Display_BCD
03F7 D000        93            pop ar0
03F9 C000        94            push ar0
03FB A83D        94            mov r0, bcd+1
03FD 12035A      94            lcall ?Display_BCD
0400 D000        94            pop ar0
0402 C000        95            push ar0
0404 A83C        95            mov r0, bcd+0
0406 12035A      95            lcall ?Display_BCD
0409 D000        95            pop ar0
040B 22          96            ret
040C             97   
040C             98   ; Initializes timer/counter 0 as a 16-bit timer
040C             99   InitTimers01:
040C E589       100            mov a, TMOD
040E 5400       101            anl a, #0x00
0410 4411       102            orl a, #0x11
0412 F589       103            mov TMOD, a
0414 758DA9     104            mov TH1, #high(TIMER1_RELOAD)
0417 758B9A     105       mov TL1, #low(TIMER1_RELOAD)
041A 75F500     106       mov RH1, #0
041D 75F300     107       mov RL1, #0
0420 C28C       108            clr TR0
0422 C28E       109            clr TR1
0424 C28D       110            clr TF0
0426 C28F       111            clr TF1
0428 D2A9       112            setb ET0
042A D2AB       113            setb ET1
042C 22         114            ret
042D            115            
042D            116   Timer0_ISR:
042D C28D       117            clr TF0
042F C0E0       118       push acc
0431 C0D0       119       push psw
0433            120       ; jb lockout ; Tentatively disabling this line
0433 200404     121       jb Go_To_Wait, Waiting_Period
0436 B291       122            cpl SOUND_OUT
0438 8018       123            sjmp Timer0_ISR_Done
043A            124   
043A            125   Waiting_Period:
043A 0545       126       inc T0ov+0
043C E545       127       mov a, T0ov+0
043E 7002       128       jnz Compare
0440 0546       129       inc T0ov+1
0442            130   
0442            131   Compare:
0442 E545       132       mov a, T0ov+0
0444 B4B80B     133       cjne a, #low(3000), Timer0_ISR_Done
0447 E546       134       mov a, T0ov+1
0449 B40B06     135       cjne a, #high(3000), Timer0_ISR_Done
044C C204       136       clr Go_To_Wait
044E C28C       137       clr TR0
0450 C28D       138       clr TF0
0452            139   
0452            140   Timer0_ISR_Done:
0452 D0E0       141       pop acc
0454 D0D0       142       pop psw
0456 32         143       reti
0457            144   
0457            145   Timer1_ISR:
0457 C28F       146            clr TF1
0459 C0E0       147       push acc
045B C0D0       148       push psw
045D 0543       149       inc T1ov+0
045F E543       150       mov a, T1ov+0
0461 7002       151       jnz Timer1_ISR_Done
0463 0544       152       inc T1ov+1
0465            153   
0465            154   Timer1_ISR_Done:
0465 D0E0       155       pop acc
0467 D0D0       156       pop psw
0469 32         157       reti
046A            158   
046A            159   InitTimer2:
046A 75C800     160       mov T2CON, #0
046D 75CB00     161       mov RCAP2H, #0
0470 75CA00     162       mov RCAP2L, #0
0473 C2AD       163            clr ET2
0475 C2CA       164       clr TR2
0477 22         165       ret
0478            166   
0478            167   Timer2_ISR:
0478 C2CF       168       clr TF2
047A C0E0       169       push acc
047C C0D0       170       push psw
047E 300305     171       jnb game_or_guess, Timer2_ISR_Counter
0481            172   
0481            173   Servo_Handler:
0481 B283       174       cpl SERVO
0483 02048E     175       ljmp Timer2_ISR_Done
0486            176   
0486            177   Timer2_ISR_Counter:
0486 0541       178       inc T2ov+0
0488 E541       179       mov a, T2ov+0
048A 7002       180       jnz Timer2_ISR_Done
048C 0542       181       inc T2ov+1
048E            182   
048E            183   Timer2_ISR_Done:
048E D0E0       184       pop acc
0490 D0D0       185       pop psw
0492 32         186       reti
0493            187   
0493            188   ;---------------------------------;
0493            189   ; Hardware initialization         ;
0493            190   ;---------------------------------;
0493            191   Initialize_All:
0493 12040C     192            lcall InitTimers01
0496 12046A     193       lcall InitTimer2
0499 12031E     194       lcall LCD_4BIT
049C 22         195            ret
049D            196   
049D            197   Initial_Seed:
049D C2AD       198            clr ET2
049F D2CA       199            setb TR2
04A1 20C5FD     200       jb SEED_GENERATOR, $
04A4 85CD38     201       mov Seed+0, TH2
04A7 753920     202       mov Seed+1, #0x20
04AA 753A81     203       mov Seed+2, #0x81
04AD 85CC3B     204       mov Seed+3, TL2
04B0 C2CA       205       clr TR2
04B2 22         206            ret
04B3            207   ;---------------------------------;
04B3            208   ; Main program loop               ;
04B3            209   ;---------------------------------;
04B3            210   
04B3            211   Random:
04B3 853830     212       mov x+0, Seed+0
04B6 853931     213       mov x+1, Seed+1
04B9 853A32     214       mov x+2, Seed+2
04BC 853B33     215       mov x+3, Seed+3
04BF 7534FD     216            mov y+0, #low (214013 % 0x10000) 
04C2 753543     216            mov y+1, #high(214013 % 0x10000) 
04C5 753603     216            mov y+2, #low (214013 / 0x10000) 
04C8 753700     216            mov y+3, #high(214013 / 0x10000) 
04CB 1201A8     217       lcall mul32
04CE 7534C3     218            mov y+0, #low (2531011 % 0x10000) 
04D1 75359E     218            mov y+1, #high(2531011 % 0x10000) 
04D4 753626     218            mov y+2, #low (2531011 / 0x10000) 
04D7 753700     218            mov y+3, #high(2531011 / 0x10000) 
04DA 1200F3     219       lcall add32
04DD 853038     220       mov Seed+0, x+0
04E0 853139     221       mov Seed+1, x+1
04E3 85323A     222       mov Seed+2, x+2
04E6 85333B     223       mov Seed+3, x+3
04E9 22         224       ret 
04EA            225   
04EA            226   Wait_Random:
04EA C002       227            push AR2
04EC AA38       227            mov R2, Seed+0
04EE 1202CF     227            lcall ?Wait_Milli_Seconds
04F1 D002       227            pop AR2
04F3 C002       228            push AR2
04F5 AA39       228            mov R2, Seed+1
04F7 1202CF     228            lcall ?Wait_Milli_Seconds
04FA D002       228            pop AR2
04FC C002       229            push AR2
04FE AA3A       229            mov R2, Seed+2
0500 1202CF     229            lcall ?Wait_Milli_Seconds
0503 D002       229            pop AR2
0505 C002       230            push AR2
0507 AA3B       230            mov R2, Seed+3
0509 1202CF     230            lcall ?Wait_Milli_Seconds
050C D002       230            pop AR2
050E C002       231            push AR2
0510 AA38       231            mov R2, Seed+0
0512 1202CF     231            lcall ?Wait_Milli_Seconds
0515 D002       231            pop AR2
0517 C002       232            push AR2
0519 AA39       232            mov R2, Seed+1
051B 1202CF     232            lcall ?Wait_Milli_Seconds
051E D002       232            pop AR2
0520 C002       233            push AR2
0522 AA3A       233            mov R2, Seed+2
0524 1202CF     233            lcall ?Wait_Milli_Seconds
0527 D002       233            pop AR2
0529 C002       234            push AR2
052B AA3B       234            mov R2, Seed+3
052D 1202CF     234            lcall ?Wait_Milli_Seconds
0530 D002       234            pop AR2
0532 C002       235            push AR2
0534 AA38       235            mov R2, Seed+0
0536 1202CF     235            lcall ?Wait_Milli_Seconds
0539 D002       235            pop AR2
053B C002       236            push AR2
053D AA39       236            mov R2, Seed+1
053F 1202CF     236            lcall ?Wait_Milli_Seconds
0542 D002       236            pop AR2
0544 C002       237            push AR2
0546 AA3A       237            mov R2, Seed+2
0548 1202CF     237            lcall ?Wait_Milli_Seconds
054B D002       237            pop AR2
054D C002       238            push AR2
054F AA3B       238            mov R2, Seed+3
0551 1202CF     238            lcall ?Wait_Milli_Seconds
0554 D002       238            pop AR2
0556 C002       239            push AR2
0558 AA38       239            mov R2, Seed+0
055A 1202CF     239            lcall ?Wait_Milli_Seconds
055D D002       239            pop AR2
055F C002       240            push AR2
0561 AA39       240            mov R2, Seed+1
0563 1202CF     240            lcall ?Wait_Milli_Seconds
0566 D002       240            pop AR2
0568 C002       241            push AR2
056A AA3A       241            mov R2, Seed+2
056C 1202CF     241            lcall ?Wait_Milli_Seconds
056F D002       241            pop AR2
0571 C002       242            push AR2
0573 AA3B       242            mov R2, Seed+3
0575 1202CF     242            lcall ?Wait_Milli_Seconds
0578 D002       242            pop AR2
057A C002       243            push AR2
057C AA38       243            mov R2, Seed+0
057E 1202CF     243            lcall ?Wait_Milli_Seconds
0581 D002       243            pop AR2
0583 C002       244            push AR2
0585 AA39       244            mov R2, Seed+1
0587 1202CF     244            lcall ?Wait_Milli_Seconds
058A D002       244            pop AR2
058C C002       245            push AR2
058E AA3A       245            mov R2, Seed+2
0590 1202CF     245            lcall ?Wait_Milli_Seconds
0593 D002       245            pop AR2
0595 C002       246            push AR2
0597 AA3B       246            mov R2, Seed+3
0599 1202CF     246            lcall ?Wait_Milli_Seconds
059C D002       246            pop AR2
059E 22         247       ret
059F            248       
059F            249   Receive_Serial:
059F D2B0       250            setb P3.0                                                                                       ; Pull RX pin high
05A1 D2AB       251            setb ET1                                                                                        ; Enable timer 1 interrupts
05A3 758920     252            mov TMOD, #20H                                                                          ; Timer 1 in mode 2 (auto reload)
05A6 758DFA     253            mov TH1, #-6                                                                            ; 115200 baud rate with our crystal
05A9 759850     254            mov SCON, #50H                                                                          ; Start bit is 0, Stop bit is 1, Rece
05AC D28E       255            setb TR1                                                                                        ; Start timer 1 for the generation of the baud rate
05AE            256   Wait:
05AE 3098FD     257            jnb RI, Wait                                                                            ; Wait for the interrupt flag to be raised that indicates that a byte has been read
05B1 E599       258            mov a, SBUF                                                                                     ; Move the contents of the serial buffer into acc
05B3 7003       259       jnz Update_Game_Or_Guess
05B5 C203       260       clr game_or_guess                                                                    ; In this case, this variable is set or cleared depending on the value received from the buffer to choose the game
05B7 22         261       ret
05B8            262       
05B8            263   Update_Game_Or_Guess:
05B8 D203       264       setb game_or_guess
05BA 22         265            ret
05BB            266   
05BB            267   Start:
05BB            268       ; Initialize the hardware:
05BB 75817F     269       mov SP, #7FH                                                                                 ; Needed for interrupts to work
05BE D2AF       270       setb EA                                                                                              ; Enable master interrupt
05C0 12059F     271       lcall Receive_Serial
05C3 120493     272       lcall Initialize_All
05C6 D280       273       setb P0.0                                                                                    ; Pin is used as input for timer 2
05C8 D2A0       274       setb P2.0                                                                                    ; Pin is used as input for timer 1
05CA D2C5       275       setb SEED_GENERATOR                                                                  ; Pin used as input for the seed generator push button
05CC C291       276       clr SOUND_OUT                                                                                ; Pin used for the speaker output
05CE D2AD       277       setb ET2                                                                                     ; Enable the timer 2 interrupt (it was cleared for the seed generation)
05D0 200302     278       jb game_or_guess, Jump_To_Guessing_Game                              ; Bit variable determines which game has been selected
05D3 8003       279       sjmp Sound_Off
05D5            280       
05D5            281   Jump_To_Guessing_Game:
05D5 02085B     282            ljmp Guessing_Game
05D8            283       
05D8            284   Sound_Off:
05D8 12049D     285       lcall Initial_Seed
05DB C208       286       clr lockout
05DD C0E0       287            push acc
05DF 7401       287            mov a, #1
05E1 14         287            dec a
05E2 120355     287            lcall ?Set_Cursor_1 ; Select column and row
05E5 D0E0       287            pop acc
05E7 C083       288            push dph
05E9 C082       288            push dpl
05EB C0E0       288            push acc
05ED 900370     288            mov dptr, #Initial_Message_Top
05F0 120348     288            lcall ?Send_Constant_String
05F3 D0E0       288            pop acc
05F5 D082       288            pop dpl
05F7 D083       288            pop dph
05F9 C0E0       289            push acc
05FB 7401       289            mov a, #1
05FD 14         289            dec a
05FE 120353     289            lcall ?Set_Cursor_2 ; Select column and row
0601 D0E0       289            pop acc
0603 C083       290            push dph
0605 C082       290            push dpl
0607 C0E0       290            push acc
0609 90037A     290            mov dptr, #Initial_Message_Bottom
060C 120348     290            lcall ?Send_Constant_String
060F D0E0       290            pop acc
0611 D082       290            pop dpl
0613 D083       290            pop dph
0615 754800     291            mov player2, #0                                                                                 ; Initialize player 2 score to 0
0618 754700     292            mov player1, #0                                                                                 ; Initialize player 1 score to 0
061B            293       
061B            294   Sound_Off_Forever:
061B 1204B3     295       lcall Random                                                                                 ; Generate a random seed        
061E E538       296       mov a, Seed+0
0620 A2E3       297       mov c, acc.3
0622 4015       298       jc Tone_High                                                                                 ; Set carry to a random bit in accumulator so that the tone played is random
0624            299   
0624            300   Tone_Low:
0624 758CE9     301       mov TH0, #high(TIMER0_RELOAD_LOW)                                    ; Set timer 0 so that it plays the low frequency tone
0627 758AD9     302            mov TL0, #low(TIMER0_RELOAD_LOW)
062A 75F4E9     303            mov RH0, #high(TIMER0_RELOAD_LOW)
062D 75F2D9     304            mov RL0, #low(TIMER0_RELOAD_LOW)
0630 C201       305       clr inc_or_dec                                                                               ; inc_or_dec responsible for determining whether the player that hit the pad deserves to lose a point or gain a point
0632 1204EA     306       lcall Wait_Random                                                                    ; Wait a random period of time
0635 C204       307       clr Go_To_Wait                                                                               ; Determines whether the timer 1 ISR will be used for waiting or playing the transducer
0637 8013       308       sjmp Tone_Off
0639            309   
0639            310   Tone_High:
0639 758CEA     311       mov TH0, #high(TIMER0_RELOAD_HIGH)                                   ; Set timer 0 so that it plays the high frequency tone
063C 758AEE     312       mov TL0, #low(TIMER0_RELOAD_HIGH)
063F 75F4EA     313            mov RH0, #high(TIMER0_RELOAD_HIGH)
0642 75F2EE     314            mov RL0, #low(TIMER0_RELOAD_HIGH)
0645 D201       315       setb inc_or_dec
0647 1204EA     316       lcall Wait_Random
064A C204       317       clr Go_To_Wait
064C            318       
064C            319   Tone_Off:
064C D28C       320            setb TR0
064E C002       321            push AR2
0650 7A64       321            mov R2, #100
0652 1202CF     321            lcall ?Wait_Milli_Seconds
0655 D002       321            pop AR2                                                         ; Play the tone for 100 ms
0657 C28C       322       clr TR0
0659            323   
0659            324   Wait_For_Input_SO:
0659 D204       325       setb Go_To_Wait                                                                              ; Now timer 0 will be used for waiting by comparing the value of the overflow variable with 3000 (3s)
065B 758CA9     326       mov TH0, #high(TIMER0_RELOAD_WAIT)                                   ; Set timer 0 to overflow every 1 ms and the ovf var will be compared to 3000 (3s) 
065E 758A9A     327            mov TL0, #low(TIMER0_RELOAD_WAIT)                                       
0661 75F4A9     328       mov RH0, #high(TIMER0_RELOAD_WAIT)
0664 75F29A     329       mov RL0, #low(TIMER0_RELOAD_WAIT)
0667 754500     330       mov T0ov+0, #0                                                                               ; Reset the timer 0 overflow variable
066A 754600     331       mov T0ov+1, #0
066D D28C       332       setb TR0
066F            333   
066F            334   Waiting_SO:
066F C28E       335       clr TR1                                                                                              ; Prepare timer 1 so that it can be synchronized to P1's 555 timer
0671 758B00     336       mov TL1, #0                                                                                  
0674 758D00     337       mov TH1, #0
0677 754300     338       mov T1ov+0, #0
067A 754400     339       mov T1ov+1, #0
067D C28F       340       clr TF1
067F D28E       341       setb TR1
0681            342   
0681            343   Synch1_TR1:
0681 20A0FD     344       jb P2.0, Synch1_TR1                                                                  ; Synchronization period
0684            345   
0684            346   Synch2_TR1:
0684 30A0FD     347       jnb P2.0, Synch2_TR1
0687            348                                                                    
0687 C28E       349       clr TR1                                                                                              ; Prepare timer 1 so that it can be used to measure the period of P1's 555 timer output                         
0689 758B00     350       mov TL1, #0
068C 758D00     351       mov TH1, #0
068F 754300     352       mov T1ov+0, #0
0692 754400     353       mov T1ov+1, #0
0695 C28F       354       clr TF1
0697 D28E       355       setb TR1
0699            356   
0699            357   Measure1_TR1:
0699 20A0FD     358       jb P2.0, Measure1_TR1                                                                ; Measurement period
069C            359   
069C            360   Measure2_TR1:
069C 30A0FD     361       jnb P2.0, Measure2_TR1
069F C28E       362       clr TR1
06A1 C28F       363       clr TF1
06A3            364   
06A3 C2CA       365       clr TR2                                                                                              ; Same thing as discussed previously for timer 1, but in this case, applied to timer 2
06A5 75CC00     366       mov TL2, #0                                                                                  ; which is associated with P2's 555 timer output
06A8 75CD00     367       mov TH2, #0
06AB 754100     368       mov T2ov+0, #0
06AE 754200     369       mov T2ov+1, #0
06B1 C2CF       370       clr TF2
06B3 D2CA       371       setb TR2
06B5            372   
06B5            373   Synch1_TR2:
06B5 2080FD     374       jb P0.0, Synch1_TR2
06B8            375   
06B8            376   Synch2_TR2:
06B8 3080FD     377       jnb P0.0, Synch2_TR2
06BB            378   
06BB C2CA       379       clr TR2
06BD 75CC00     380       mov TL2, #0
06C0 75CD00     381       mov TH2, #0
06C3 754100     382       mov T2ov+0, #0
06C6 754200     383       mov T2ov+1, #0
06C9 C2CF       384       clr TF2
06CB D2CA       385       setb TR2
06CD            386   
06CD            387   Measure1_TR2:
06CD 2080FD     388       jb P0.0, Measure1_TR2
06D0            389   
06D0            390   Measure2_TR2:
06D0 3080FD     391       jnb P0.0, Measure2_TR2
06D3 C2CA       392       clr TR2
06D5 C2CF       393       clr TF2
06D7            394   
06D7 858B30     395       mov x+0, TL1                                                                                 ; Calculate timer 1 raw period and compare it to see if it exceeds the threshold value
06DA 858D31     396       mov x+1, TH1                                                                                 ; that occurs when player 1 has hit the pad
06DD 854332     397       mov x+2, T1ov+0
06E0 854433     398       mov x+3, T1ov+1
06E3 75342D     399            mov y+0, #low (45 % 0x10000) 
06E6 753500     399            mov y+1, #high(45 % 0x10000) 
06E9 753600     399            mov y+2, #low (45 / 0x10000) 
06EC 753700     399            mov y+3, #high(45 / 0x10000) 
06EF 1201A8     400       lcall mul32
06F2 753440     401            mov y+0, #low (STEADY_STATE % 0x10000) 
06F5 7535E4     401            mov y+1, #high(STEADY_STATE % 0x10000) 
06F8 753659     401            mov y+2, #low (STEADY_STATE / 0x10000) 
06FB 753704     401            mov y+3, #high(STEADY_STATE / 0x10000) 
06FE 120152     402       lcall x_gt_y                                                                                 ; Comparison
0701 D205       403       setb score_to_update                                                                 ; If player 1 hit the pad, the score to update will be associated with them
0703 200232     404       jb mf, Done_Waiting                                                                  ; If player 1 hit the pad, we want to leave the waiting loop
0706            405   
0706 85CC30     406       mov x+0, TL2                                                                                 ; Calculate timer 2 raw period for the same reason. 
0709 85CD31     407       mov x+1, TH2
070C 854132     408       mov x+2, T2ov+0
070F 854233     409       mov x+3, T2ov+1
0712 75342D     410            mov y+0, #low (45 % 0x10000) 
0715 753500     410            mov y+1, #high(45 % 0x10000) 
0718 753600     410            mov y+2, #low (45 / 0x10000) 
071B 753700     410            mov y+3, #high(45 / 0x10000) 
071E 1201A8     411            lcall mul32
0721 753440     412            mov y+0, #low (STEADY_STATE % 0x10000) 
0724 7535E4     412            mov y+1, #high(STEADY_STATE % 0x10000) 
0727 753659     412            mov y+2, #low (STEADY_STATE / 0x10000) 
072A 753704     412            mov y+3, #high(STEADY_STATE / 0x10000) 
072D 120152     413       lcall x_gt_y                                                                                 ; Comparison
0730 C205       414       clr score_to_update                                                                  ; If player 2 hit the pad, the score to update will be associated with them
0732 200203     415       jb mf, Done_Waiting                                                                  ; If player 1 hit the pad, we want to leave the waiting loop
0735 0207C8     416       ljmp Still_Waiting                                                                   ; If no one hit the pad, we restart the waiting loop
0738            417   
0738            418   Done_Waiting:
0738 C28C       419            clr TR0
073A C28D       420            clr TF0
073C 20053B     421       jb score_to_update, Update_Player_1                                  ; If Player 1 hit the pad, score_to_update would have been set so we know that we
073F            422                                                                                                                    ; have to update player 1's score
073F            423   Update_Player_2:
073F            424   
073F            425   Incremement_Score_P2:                                                                    
073F 300118     426       jnb inc_or_dec, Decrement_Score_P2                                   ; If player 2 hit the pad when a low tone was played, inc_or_dec would be 0 and it would jump to the decremenet routine
0742 0548       427            inc player2                                                                                     ; Increment player 2's score if they hit the pad on the high tone
0744 C0E0       428            push acc
0746 740B       428            mov a, #11
0748 14         428            dec a
0749 120353     428            lcall ?Set_Cursor_2 ; Select column and row
074C D0E0       428            pop acc
074E C000       429            push ar0
0750 A848       429            mov r0, player2
0752 12035A     429            lcall ?Display_BCD
0755 D000       429            pop ar0
0757 0207D8     430       ljmp Check_Player2                                                                   ; Increment score and restart. If player 2 matches the winning score it will update in the next cycle
075A            431   
075A            432   Decrement_Score_P2:
075A E548       433            mov a, player2
075C B40003     434            cjne a, #0, Continue_Decrement_P2                                       ; Check to see that score is not 0 and if it is, then do not decrement and start a new cycle
075F 0207D8     435            ljmp Check_Player2
0762            436            
0762            437   Continue_Decrement_P2:
0762 1548       438            dec player2
0764 C0E0       439            push acc
0766 740B       439            mov a, #11
0768 14         439            dec a
0769 120353     439            lcall ?Set_Cursor_2 ; Select column and row
076C D0E0       439            pop acc
076E C000       440            push ar0
0770 A848       440            mov r0, player2
0772 12035A     440            lcall ?Display_BCD
0775 D000       440            pop ar0
0777 0207D8     441       ljmp Check_Player2
077A            442   
077A            443   Update_Player_1:
077A            444   
077A            445   Incremement_Score_P1:
077A 30012B     446       jnb inc_or_dec, Decrement_Score_P1                                   ; Same idea as above for handling player 2's score
077D C0E0       447            push acc
077F 740F       447            mov a, #15
0781 14         447            dec a
0782 120355     447            lcall ?Set_Cursor_1 ; Select column and row
0785 D0E0       447            pop acc
0787 C0E0       448            push acc
0789 7432       448            mov a, #'2'
078B 120314     448            lcall ?WriteData
078E D0E0       448            pop acc
0790 0547       449            inc player1
0792 C0E0       450            push acc
0794 740B       450            mov a, #11
0796 14         450            dec a
0797 120355     450            lcall ?Set_Cursor_1 ; Select column and row
079A D0E0       450            pop acc
079C C000       451            push ar0
079E A847       451            mov r0, player1
07A0 12035A     451            lcall ?Display_BCD
07A3 D000       451            pop ar0
07A5 0207D0     452       ljmp Check_Player1
07A8            453   
07A8            454   Decrement_Score_P1:
07A8 E547       455            mov a, player1
07AA B40003     456            cjne a, #0, Continue_Decrement_P1
07AD 0207D0     457            ljmp Check_Player1
07B0            458            
07B0            459   Continue_Decrement_P1:
07B0 1547       460            dec player1
07B2 C0E0       461            push acc
07B4 740B       461            mov a, #11
07B6 14         461            dec a
07B7 120355     461            lcall ?Set_Cursor_1 ; Select column and row
07BA D0E0       461            pop acc
07BC C000       462            push ar0
07BE A847       462            mov r0, player1
07C0 12035A     462            lcall ?Display_BCD
07C3 D000       462            pop ar0
07C5 0207D0     463       ljmp Check_Player1
07C8            464       
07C8            465   Still_Waiting:                                                                                   
07C8 200402     466       jb Go_To_Wait, Jump_To_Waiting_SO                                    ; If no one hit the pad, then we are still in the waiting loop
07CB 8003       467       sjmp Check_Player1                                                                   ; If there was a timeout, then just fall through to the check player routines
07CD            468   
07CD            469   Jump_To_Waiting_SO:
07CD 02066F     470            ljmp Waiting_SO                                                                                 ; Restart waiting loop
07D0            471   
07D0            472   Check_Player1:                                                                                   ; Check if player 1 has won
07D0 E547       473       mov a, player1
07D2 B46503     474       cjne a, #WINNING_SCORE, Check_Player2
07D5 0207E5     475       ljmp Player_1_Won
07D8            476   
07D8            477   Check_Player2:                                                                                   ; Check if player 2 has won
07D8 E548       478       mov a, player2
07DA B46503     479       cjne a, #WINNING_SCORE, Game_Still_In_Progress
07DD 020820     480       ljmp Player_2_Won
07E0            481   
07E0            482   Game_Still_In_Progress:                                                                  ; Restart cycle to play new tone
07E0 C204       483       clr Go_To_Wait
07E2 02061B     484       ljmp Sound_Off_Forever
07E5            485       
07E5            486   Player_1_Won:                                                                                    ; If player 1 has won, then display the appropriate message
07E5 C0E0       487            push acc
07E7 7401       487            mov a, #1
07E9 14         487            dec a
07EA 120355     487            lcall ?Set_Cursor_1 ; Select column and row
07ED D0E0       487            pop acc
07EF C083       488            push dph
07F1 C082       488            push dpl
07F3 C0E0       488            push acc
07F5 900395     488            mov dptr, #Player1_Message
07F8 120348     488            lcall ?Send_Constant_String
07FB D0E0       488            pop acc
07FD D082       488            pop dpl
07FF D083       488            pop dph
0801 C0E0       489            push acc
0803 7401       489            mov a, #1
0805 14         489            dec a
0806 120353     489            lcall ?Set_Cursor_2 ; Select column and row
0809 D0E0       489            pop acc
080B C083       490            push dph
080D C082       490            push dpl
080F C0E0       490            push acc
0811 900384     490            mov dptr, #Clear
0814 120348     490            lcall ?Send_Constant_String
0817 D0E0       490            pop acc
0819 D082       490            pop dpl
081B D083       490            pop dph
081D 020A19     491       ljmp Complete
0820            492   
0820            493   Player_2_Won:                                                                                    ; If player 2 has won, then display the appropriate message
0820 C0E0       494            push acc
0822 7401       494            mov a, #1
0824 14         494            dec a
0825 120353     494            lcall ?Set_Cursor_2 ; Select column and row
0828 D0E0       494            pop acc
082A C083       495            push dph
082C C082       495            push dpl
082E C0E0       495            push acc
0830 9003A5     495            mov dptr, #Player2_Message
0833 120348     495            lcall ?Send_Constant_String
0836 D0E0       495            pop acc
0838 D082       495            pop dpl
083A D083       495            pop dph
083C C0E0       496            push acc
083E 7401       496            mov a, #1
0840 14         496            dec a
0841 120355     496            lcall ?Set_Cursor_1 ; Select column and row
0844 D0E0       496            pop acc
0846 C083       497            push dph
0848 C082       497            push dpl
084A C0E0       497            push acc
084C 900384     497            mov dptr, #Clear
084F 120348     497            lcall ?Send_Constant_String
0852 D0E0       497            pop acc
0854 D082       497            pop dpl
0856 D083       497            pop dph
0858 020A19     498       ljmp Complete
085B            499       
085B            500   Guessing_Game:                                                                                   ; The second of our two games
085B C204       501       clr Go_To_Wait
085D 12049D     502            lcall Initial_Seed
0860 D2AD       503       setb ET2
0862 C0E0       504            push acc
0864 7401       504            mov a, #1
0866 14         504            dec a
0867 120355     504            lcall ?Set_Cursor_1 ; Select column and row
086A D0E0       504            pop acc
086C C083       505            push dph
086E C082       505            push dpl
0870 C0E0       505            push acc
0872 9003B5     505            mov dptr, #Guess_Player_Message
0875 120348     505            lcall ?Send_Constant_String
0878 D0E0       505            pop acc
087A D082       505            pop dpl
087C D083       505            pop dph
087E C0E0       506            push acc
0880 7401       506            mov a, #1
0882 14         506            dec a
0883 120353     506            lcall ?Set_Cursor_2 ; Select column and row
0886 D0E0       506            pop acc
0888 C083       507            push dph
088A C082       507            push dpl
088C C0E0       507            push acc
088E 9003C5     507            mov dptr, #Lives_Message
0891 120348     507            lcall ?Send_Constant_String
0894 D0E0       507            pop acc
0896 D082       507            pop dpl
0898 D083       507            pop dph
089A 754A00     508       mov guess_score, #0x00
089D 754903     509       mov lives_left, #0x03
08A0 C002       510            push AR2
08A2 7AFF       510            mov R2, #255
08A4 1202CF     510            lcall ?Wait_Milli_Seconds
08A7 D002       510            pop AR2
08A9 C002       511            push AR2
08AB 7AFF       511            mov R2, #255
08AD 1202CF     511            lcall ?Wait_Milli_Seconds
08B0 D002       511            pop AR2
08B2 C002       512            push AR2
08B4 7AFF       512            mov R2, #255
08B6 1202CF     512            lcall ?Wait_Milli_Seconds
08B9 D002       512            pop AR2
08BB C002       513            push AR2
08BD 7AFF       513            mov R2, #255
08BF 1202CF     513            lcall ?Wait_Milli_Seconds
08C2 D002       513            pop AR2
08C4 C002       514            push AR2
08C6 7AFF       514            mov R2, #255
08C8 1202CF     514            lcall ?Wait_Milli_Seconds
08CB D002       514            pop AR2
08CD C002       515            push AR2
08CF 7AFF       515            mov R2, #255
08D1 1202CF     515            lcall ?Wait_Milli_Seconds
08D4 D002       515            pop AR2
08D6 C002       516            push AR2
08D8 7AFF       516            mov R2, #255
08DA 1202CF     516            lcall ?Wait_Milli_Seconds
08DD D002       516            pop AR2
08DF C002       517            push AR2
08E1 7AFF       517            mov R2, #255
08E3 1202CF     517            lcall ?Wait_Milli_Seconds
08E6 D002       517            pop AR2
08E8            518   
08E8            519   Guessing_Game_Forever:
08E8 1204B3     520       lcall Random
08EB E538       521       mov a, Seed+0
08ED A2E3       522       mov c, acc.3
08EF 9206       523       mov direction, c
08F1 758CEA     524       mov TH0, #high(TIMER0_RELOAD_HIGH)
08F4 758AEE     525            mov TL0, #low(TIMER0_RELOAD_HIGH)
08F7 75F4EA     526            mov RH0, #high(TIMER0_RELOAD_HIGH)
08FA 75F2EE     527            mov RL0, #low(TIMER0_RELOAD_HIGH)
08FD C208       528       clr lockout
08FF C204       529            clr Go_To_Wait
0901 C2AB       530            clr ET1
0903 C28F       531       clr TF1
0905 D28C       532       setb TR0
0907 C002       533            push AR2
0909 7AFF       533            mov R2, #255
090B 1202CF     533            lcall ?Wait_Milli_Seconds
090E D002       533            pop AR2
0910 C002       534            push AR2
0912 7A64       534            mov R2, #100
0914 1202CF     534            lcall ?Wait_Milli_Seconds
0917 D002       534            pop AR2
0919 C28C       535       clr TR0
091B D208       536       setb lockout
091D            537       
091D            538   Wait_For_Input_GG:
091D 12059F     539       lcall Receive_Serial
0920 C28E       540       clr TR1
0922 C28F       541       clr TF1
0924 758901     542       mov TMOD, #01H
0927 4002       543       jc Right
0929 8006       544       sjmp Left
092B            545      
092B            546   Right:
092B 120937     547            lcall Servo_Right
092E 02096B     548            ljmp Update_Score
0931            549            
0931            550   Left:
0931 120951     551            lcall Servo_Left
0934 02096B     552            ljmp Update_Score
0937            553   
0937            554   Servo_Right:
0937 758CFC     555            mov TH0, #0FCH
093A 758A19     556            mov TL0, #19H
093D 75F400     557            mov RH0, #0
0940 75F200     558            mov RL0, #0
0943 D283       559            setb SERVO
0945 D28C       560            setb TR0
0947            561            
0947            562   Wait_GG_Right:
0947 308DFD     563            jnb TF0, Wait_GG_Right
094A C283       564            clr SERVO
094C C28D       565            clr TF0
094E C28C       566            clr TR0
0950 22         567            ret
0951            568   
0951            569   Servo_Left:
0951 758CF8     570       mov TH0, #0F8H
0954 758A31     571            mov TL0, #31H
0957 75F400     572            mov RH0, #0
095A 75F200     573            mov RL0, #0
095D D283       574            setb SERVO
095F D28C       575            setb TR0
0961            576       
0961            577   Wait_GG_Left:
0961 308DFD     578            jnb TF0, Wait_GG_Left
0964 C283       579            clr SERVO
0966 C28D       580            clr TF0
0968 C28C       581            clr TR0
096A 22         582            ret
096B            583   
096B            584   Update_Score:
096B E503       585       mov a, game_or_guess
096D B50635     586       cjne a, direction, Take_Life
0970            587   
0970            588   Add_To_Score:
0970 E54A       589       mov a, guess_score
0972 2401       590       add a, #0x01
0974 D4         591       da a
0975 F54A       592       mov guess_score, a
0977 E549       593       mov a, lives_left
0979 D4         594       da a
097A F549       595       mov lives_left, a
097C C0E0       596            push acc
097E 740F       596            mov a, #15
0980 14         596            dec a
0981 120355     596            lcall ?Set_Cursor_1 ; Select column and row
0984 D0E0       596            pop acc
0986 C000       597            push ar0
0988 A84A       597            mov r0, guess_score
098A 12035A     597            lcall ?Display_BCD
098D D000       597            pop ar0
098F C0E0       598            push acc
0991 740D       598            mov a, #13
0993 14         598            dec a
0994 120353     598            lcall ?Set_Cursor_2 ; Select column and row
0997 D0E0       598            pop acc
0999 C000       599            push ar0
099B A849       599            mov r0, lives_left
099D 12035A     599            lcall ?Display_BCD
09A0 D000       599            pop ar0
09A2 0208E8     600            ljmp Guessing_Game_Forever
09A5            601            
09A5            602   Take_Life:
09A5 E549       603       mov a, lives_left
09A7 2499       604       add a, #0x99
09A9 D4         605       da a
09AA F549       606       mov lives_left, a
09AC E54A       607       mov a, guess_score
09AE D4         608       da a
09AF F54A       609       mov guess_score, a
09B1 C0E0       610            push acc
09B3 740F       610            mov a, #15
09B5 14         610            dec a
09B6 120355     610            lcall ?Set_Cursor_1 ; Select column and row
09B9 D0E0       610            pop acc
09BB C000       611            push ar0
09BD A84A       611            mov r0, guess_score
09BF 12035A     611            lcall ?Display_BCD
09C2 D000       611            pop ar0
09C4 C0E0       612            push acc
09C6 740D       612            mov a, #13
09C8 14         612            dec a
09C9 120353     612            lcall ?Set_Cursor_2 ; Select column and row
09CC D0E0       612            pop acc
09CE C000       613            push ar0
09D0 A849       613            mov r0, lives_left
09D2 12035A     613            lcall ?Display_BCD
09D5 D000       613            pop ar0
09D7 E549       614       mov a, lives_left
09D9 B40002     615       cjne a, #0x00, Game_Not_Lost
09DC 8003       616       sjmp Game_Lost
09DE            617   
09DE            618   Game_Not_Lost:
09DE 0208E8     619            ljmp Guessing_Game_Forever
09E1            620   
09E1            621   Game_Lost:
09E1 C0E0       622            push acc
09E3 7401       622            mov a, #1
09E5 14         622            dec a
09E6 120353     622            lcall ?Set_Cursor_2 ; Select column and row
09E9 D0E0       622            pop acc
09EB C083       623            push dph
09ED C082       623            push dpl
09EF C0E0       623            push acc
09F1 900384     623            mov dptr, #Clear
09F4 120348     623            lcall ?Send_Constant_String
09F7 D0E0       623            pop acc
09F9 D082       623            pop dpl
09FB D083       623            pop dph
09FD C0E0       624            push acc
09FF 7401       624            mov a, #1
0A01 14         624            dec a
0A02 120355     624            lcall ?Set_Cursor_1 ; Select column and row
0A05 D0E0       624            pop acc
0A07 C083       625            push dph
0A09 C082       625            push dpl
0A0B C0E0       625            push acc
0A0D 9003D3     625            mov dptr, #Lost
0A10 120348     625            lcall ?Send_Constant_String
0A13 D0E0       625            pop acc
0A15 D082       625            pop dpl
0A17 D083       625            pop dph
0A19            626       
0A19            627   Complete:
0A19 80FE       628       sjmp Complete
0A1B            629   en
